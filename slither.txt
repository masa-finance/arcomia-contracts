'npx hardhat compile --force' running
Generating typings for: 48 artifacts in dir: typechain for target: ethers-v5
Successfully generated 118 typings!
Compiled 48 Solidity files successfully
âœ… Generated documentation for 48 contracts


Reentrancy in SoulboundCreditScore.mint(address,uint256,address,uint256,bytes) (contracts/SoulboundCreditScore.sol#52-83):
        External calls:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        State variables written after the call(s):
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _balances[to] += 1 (contracts/tokens/SBT/SBT.sol#171)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Contract locking ether found:
        Contract SoulboundIdentity (contracts/SoulboundIdentity.sol#14-229) has payable functions:
         - ISoulboundIdentity.mintIdentityWithName(address,string,uint256,string) (contracts/interfaces/ISoulboundIdentity.sol#11-16)
         - SoulboundIdentity.mintIdentityWithName(address,string,uint256,string) (contracts/SoulboundIdentity.sol#61-71)
        But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in SoulName.mint(address,string,uint256,string) (contracts/SoulName.sol#114-146):
        External calls:
        - tokenId = _mintWithCounter(to) (contracts/SoulName.sol#133)
                - IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#401-412)
        State variables written after the call(s):
        - nameData[lowercaseName].tokenId = tokenId (contracts/SoulName.sol#142)
        - nameData[lowercaseName].exists = true (contracts/SoulName.sol#143)
        - tokenData[tokenId].name = name (contracts/SoulName.sol#136)
        - tokenData[tokenId].expirationDate = block.timestamp.add(YEAR.mul(yearsPeriod)) (contracts/SoulName.sol#137-139)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

SoulName.getSoulNames(address).index (contracts/SoulName.sol#333) is a local variable never initialized
SoulName.getTokenData(string)._identityId (contracts/SoulName.sol#266) is a local variable never initialized
SoulName.getSoulNames(address).results (contracts/SoulName.sol#322) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#394-416) ignores return value by IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#401-412)
SoulboundIdentity.mintIdentityWithName(address,string,uint256,string) (contracts/SoulboundIdentity.sol#61-71) ignores return value by soulName.mint(to,name,yearsPeriod,_tokenURI) (contracts/SoulboundIdentity.sol#68)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

SoulLinker.constructor(address,ISoulboundIdentity,uint256,uint256,PaymentGateway.PaymentParams).owner (contracts/SoulLinker.sol#50) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulLinker.getIdentityId(address,uint256).owner (contracts/SoulLinker.sol#261) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulLinker.getSBTLinks(uint256,address).owner (contracts/SoulLinker.sol#276) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulLinker.getSBTLinks(address,address).owner (contracts/SoulLinker.sol#286) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulLinker._verify(bytes32,bytes,address).owner (contracts/SoulLinker.sol#440) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulName.mint(address,string,uint256,string).name (contracts/SoulName.sol#116) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName.isAvailable(string).name (contracts/SoulName.sol#226) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName.getTokenData(string).name (contracts/SoulName.sol#250) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName.getTokenData(string)._owner (contracts/SoulName.sol#264) shadows:
        - Ownable._owner (node_modules/@openzeppelin/contracts/access/Ownable.sol#21) (state variable)
SoulName.getTokenId(string).name (contracts/SoulName.sol#287) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName.getSoulNames(uint256)._owner (contracts/SoulName.sol#307) shadows:
        - Ownable._owner (node_modules/@openzeppelin/contracts/access/Ownable.sol#21) (state variable)
SoulName.getSoulNames(address).owner (contracts/SoulName.sol#316) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
SoulName.tokenURI(string).name (contracts/SoulName.sol#351) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName._getName(string).name (contracts/SoulName.sol#393) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulName._getTokenId(string).name (contracts/SoulName.sol#397) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
SoulStore.constructor(address,ISoulboundIdentity,uint256,PaymentGateway.PaymentParams).owner (contracts/SoulStore.sol#36) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
Soulbound2FA.constructor(address,string,ISoulboundIdentity,uint256,PaymentGateway.PaymentParams).soulboundIdentity (contracts/Soulbound2FA.sol#27) shadows:
        - MasaSBTSelfSovereign.soulboundIdentity (contracts/tokens/MasaSBTSelfSovereign.sol#26) (state variable)
SoulboundCreditScore.constructor(address,string,ISoulboundIdentity,uint256,PaymentGateway.PaymentParams).soulboundIdentity (contracts/SoulboundCreditScore.sol#27) shadows:
        - MasaSBTSelfSovereign.soulboundIdentity (contracts/tokens/MasaSBTSelfSovereign.sol#26) (state variable)
SoulboundIdentity.mintIdentityWithName(address,string,uint256,string).name (contracts/SoulboundIdentity.sol#63) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
SoulboundIdentity.ownerOf(string).name (contracts/SoulboundIdentity.sol#106) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
SoulboundIdentity.tokenURI(string).name (contracts/SoulboundIdentity.sol#120) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
SoulboundIdentity.isAvailable(string).name (contracts/SoulboundIdentity.sol#156) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
SoulboundIdentity.getTokenData(string).name (contracts/SoulboundIdentity.sol#174) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
PaymentGateway.constructor(address,PaymentGateway.PaymentParams).owner (contracts/dex/PaymentGateway.sol#49) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
MasaNFT.constructor(address,string,string,string).name (contracts/tokens/MasaNFT.sol#44) shadows:
        - ERC721.name() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#79-81) (function)
        - IERC721Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#16) (function)
MasaNFT.constructor(address,string,string,string).symbol (contracts/tokens/MasaNFT.sol#45) shadows:
        - ERC721.symbol() (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#86-88) (function)
        - IERC721Metadata.symbol() (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#21) (function)
MasaSBT.constructor(address,string,string,string).name (contracts/tokens/MasaSBT.sol#32) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
MasaSBT.constructor(address,string,string,string).symbol (contracts/tokens/MasaSBT.sol#33) shadows:
        - SBT.symbol() (contracts/tokens/SBT/SBT.sol#92-94) (function)
        - ISBTMetadata.symbol() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#18) (function)
MasaSBTAuthority.constructor(address,string,string,string).name (contracts/tokens/MasaSBTAuthority.sol#30) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
MasaSBTAuthority.constructor(address,string,string,string).symbol (contracts/tokens/MasaSBTAuthority.sol#31) shadows:
        - SBT.symbol() (contracts/tokens/SBT/SBT.sol#92-94) (function)
        - ISBTMetadata.symbol() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#18) (function)
MasaSBTSelfSovereign.constructor(address,string,string,string,ISoulboundIdentity,uint256,PaymentGateway.PaymentParams).name (contracts/tokens/MasaSBTSelfSovereign.sol#45) shadows:
        - SBT.name() (contracts/tokens/SBT/SBT.sol#85-87) (function)
        - ISBTMetadata.name() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#13) (function)
MasaSBTSelfSovereign.constructor(address,string,string,string,ISoulboundIdentity,uint256,PaymentGateway.PaymentParams).symbol (contracts/tokens/MasaSBTSelfSovereign.sol#46) shadows:
        - SBT.symbol() (contracts/tokens/SBT/SBT.sol#92-94) (function)
        - ISBTMetadata.symbol() (contracts/tokens/SBT/extensions/ISBTMetadata.sol#18) (function)
MasaSBTSelfSovereign.getIdentityId(uint256).owner (contracts/tokens/MasaSBTSelfSovereign.sol#107) shadows:
        - Ownable.owner() (node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

SoulLinker.setAddPermissionPrice(uint256) (contracts/SoulLinker.sol#102-108) should emit an event for: 
        - addPermissionPrice = _addPermissionPrice (contracts/SoulLinker.sol#107) 
SoulLinker.setAddPermissionPriceMASA(uint256) (contracts/SoulLinker.sol#113-122) should emit an event for: 
        - addPermissionPriceMASA = _addPermissionPriceMASA (contracts/SoulLinker.sol#121) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

SoulLinker.getSBTLinks(address,address) (contracts/SoulLinker.sol#286-303) has external calls inside a loop: sbtLinks[i] = IERC721Enumerable(token).tokenOfOwnerByIndex(owner,i) (contracts/SoulLinker.sol#296-299)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Variable 'ERC721._checkOnERC721Received(address,address,uint256,bytes).retval (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#401)' in ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#394-416) potentially used before declaration: retval == IERC721Receiver.onERC721Received.selector (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#402)
Variable 'ERC721._checkOnERC721Received(address,address,uint256,bytes).reason (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#403)' in ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#394-416) potentially used before declaration: reason.length == 0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#404)
Variable 'ERC721._checkOnERC721Received(address,address,uint256,bytes).reason (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#403)' in ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#394-416) potentially used before declaration: revert(uint256,uint256)(32 + reason,mload(uint256)(reason)) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#409)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables

Reentrancy in SoulLinker.addPermission(address,uint256,uint256,address,uint256,string,uint256,uint256,bytes) (contracts/SoulLinker.sol#148-209):
        External calls:
        - _payWithMASA(addPermissionPriceMASA) (contracts/SoulLinker.sol#186)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - IERC20(masaToken).safeTransferFrom(msg.sender,reserveWallet,amountInMASA) (contracts/dex/PaymentGateway.sol#223-227)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
        - _pay(paymentMethod,addPermissionPrice) (contracts/SoulLinker.sol#189)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _payWithMASA(addPermissionPriceMASA) (contracts/SoulLinker.sol#186)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
        - _pay(paymentMethod,addPermissionPrice) (contracts/SoulLinker.sol#189)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        State variables written after the call(s):
        - _permissionSignatureDates[token][tokenId][readerIdentityId].push(signatureDate) (contracts/SoulLinker.sol#196-198)
        - _permissions[token][tokenId][readerIdentityId][signatureDate] = PermissionData(ownerIdentityId,data,expirationDate,false) (contracts/SoulLinker.sol#193-195)
Reentrancy in SoulName.mint(address,string,uint256,string) (contracts/SoulName.sol#114-146):
        External calls:
        - tokenId = _mintWithCounter(to) (contracts/SoulName.sol#133)
                - IERC721Receiver(to).onERC721Received(_msgSender(),from,tokenId,data) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#401-412)
        State variables written after the call(s):
        - _setTokenURI(tokenId,_tokenURI) (contracts/SoulName.sol#134)
                - _URIs[_tokenURI] = true (contracts/SoulName.sol#415)
        - _setTokenURI(tokenId,_tokenURI) (contracts/SoulName.sol#134)
                - _tokenURIs[tokenId] = _tokenURI (contracts/SoulName.sol#414)
Reentrancy in Soulbound2FA.mint(address,uint256,address,uint256,bytes) (contracts/Soulbound2FA.sol#52-82):
        External calls:
        - _pay(paymentMethod,mintingPrice) (contracts/Soulbound2FA.sol#68)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _pay(paymentMethod,mintingPrice) (contracts/Soulbound2FA.sol#68)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        State variables written after the call(s):
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _allTokens.push(tokenId) (contracts/tokens/SBT/extensions/SBTEnumerable.sol#132)
                - _allTokens[tokenIndex] = lastTokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#182)
                - _allTokens.pop() (contracts/tokens/SBT/extensions/SBTEnumerable.sol#187)
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _allTokensIndex[tokenId] = _allTokens.length (contracts/tokens/SBT/extensions/SBTEnumerable.sol#131)
                - _allTokensIndex[lastTokenId] = tokenIndex (contracts/tokens/SBT/extensions/SBTEnumerable.sol#183)
                - delete _allTokensIndex[tokenId] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#186)
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _balances[to] += 1 (contracts/tokens/SBT/SBT.sol#171)
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _ownedTokens[to][length] = tokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#122)
                - _ownedTokens[from][tokenIndex] = lastTokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#156)
                - delete _ownedTokens[from][lastTokenIndex] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#162)
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _ownedTokensIndex[tokenId] = length (contracts/tokens/SBT/extensions/SBTEnumerable.sol#123)
                - _ownedTokensIndex[lastTokenId] = tokenIndex (contracts/tokens/SBT/extensions/SBTEnumerable.sol#157)
                - delete _ownedTokensIndex[tokenId] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#161)
        - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
                - _owners[tokenId] = to (contracts/tokens/SBT/SBT.sol#172)
Reentrancy in SoulboundCreditScore.mint(address,uint256,address,uint256,bytes) (contracts/SoulboundCreditScore.sol#52-83):
        External calls:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        State variables written after the call(s):
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _allTokens.push(tokenId) (contracts/tokens/SBT/extensions/SBTEnumerable.sol#132)
                - _allTokens[tokenIndex] = lastTokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#182)
                - _allTokens.pop() (contracts/tokens/SBT/extensions/SBTEnumerable.sol#187)
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _allTokensIndex[tokenId] = _allTokens.length (contracts/tokens/SBT/extensions/SBTEnumerable.sol#131)
                - _allTokensIndex[lastTokenId] = tokenIndex (contracts/tokens/SBT/extensions/SBTEnumerable.sol#183)
                - delete _allTokensIndex[tokenId] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#186)
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _ownedTokens[to][length] = tokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#122)
                - _ownedTokens[from][tokenIndex] = lastTokenId (contracts/tokens/SBT/extensions/SBTEnumerable.sol#156)
                - delete _ownedTokens[from][lastTokenIndex] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#162)
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _ownedTokensIndex[tokenId] = length (contracts/tokens/SBT/extensions/SBTEnumerable.sol#123)
                - _ownedTokensIndex[lastTokenId] = tokenIndex (contracts/tokens/SBT/extensions/SBTEnumerable.sol#157)
                - delete _ownedTokensIndex[tokenId] (contracts/tokens/SBT/extensions/SBTEnumerable.sol#161)
        - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
                - _owners[tokenId] = to (contracts/tokens/SBT/SBT.sol#172)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in SoulStore._mintSoulName(address,string,uint256,string) (contracts/SoulStore.sol#259-273):
        External calls:
        - tokenId = soulName.mint(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#268)
        Event emitted after the call(s):
        - SoulNamePurchased(to,tokenId,name,yearsPeriod) (contracts/SoulStore.sol#270)
Reentrancy in SoulStore._mintSoulboundIdentity(address) (contracts/SoulStore.sol#242-249):
        External calls:
        - tokenId = soulboundIdentity.mint(to) (contracts/SoulStore.sol#244)
        Event emitted after the call(s):
        - SoulboundIdentityPurchased(to,tokenId) (contracts/SoulStore.sol#246)
Reentrancy in SoulStore._mintSoulboundIdentityAndName(address,string,uint256,string) (contracts/SoulStore.sol#218-235):
        External calls:
        - tokenId = soulboundIdentity.mintIdentityWithName(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#225-230)
        Event emitted after the call(s):
        - SoulboundIdentityAndNamePurchased(to,tokenId,name,yearsPeriod) (contracts/SoulStore.sol#232)
Reentrancy in SoulLinker.addPermission(address,uint256,uint256,address,uint256,string,uint256,uint256,bytes) (contracts/SoulLinker.sol#148-209):
        External calls:
        - _payWithMASA(addPermissionPriceMASA) (contracts/SoulLinker.sol#186)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - IERC20(masaToken).safeTransferFrom(msg.sender,reserveWallet,amountInMASA) (contracts/dex/PaymentGateway.sol#223-227)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
        - _pay(paymentMethod,addPermissionPrice) (contracts/SoulLinker.sol#189)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _payWithMASA(addPermissionPriceMASA) (contracts/SoulLinker.sol#186)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
        - _pay(paymentMethod,addPermissionPrice) (contracts/SoulLinker.sol#189)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        Event emitted after the call(s):
        - PermissionAdded(readerIdentityId,ownerIdentityId,token,tokenId,data,signatureDate,expirationDate) (contracts/SoulLinker.sol#200-208)
Reentrancy in Soulbound2FA.mint(address,uint256,address,uint256,bytes) (contracts/Soulbound2FA.sol#52-82):
        External calls:
        - _pay(paymentMethod,mintingPrice) (contracts/Soulbound2FA.sol#68)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _pay(paymentMethod,mintingPrice) (contracts/Soulbound2FA.sol#68)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        Event emitted after the call(s):
        - Mint(to,tokenId) (contracts/tokens/SBT/SBT.sol#174)
                - tokenId = _mintWithCounter(to) (contracts/Soulbound2FA.sol#70)
        - Soulbound2FAMinted(tokenId,identityId,authorityAddress,signatureDate,paymentMethod,mintingPrice) (contracts/Soulbound2FA.sol#72-79)
Reentrancy in SoulboundCreditScore.mint(address,uint256,address,uint256,bytes) (contracts/SoulboundCreditScore.sol#52-83):
        External calls:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        External calls sending eth:
        - _pay(paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#69)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        Event emitted after the call(s):
        - Mint(to,tokenId) (contracts/tokens/SBT/SBT.sol#174)
                - tokenId = _mintWithCounter(to) (contracts/SoulboundCreditScore.sol#71)
        - SoulboundCreditScoreMinted(tokenId,identityId,authorityAddress,signatureDate,paymentMethod,mintingPrice) (contracts/SoulboundCreditScore.sol#73-80)
Reentrancy in SoulStore.purchaseIdentityAndName(address,string,uint256,string) (contracts/SoulStore.sol#103-122):
        External calls:
        - _pay(paymentMethod,getNameRegistrationPricePerYear(name).mul(yearsPeriod)) (contracts/SoulStore.sol#109-112)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        - _mintSoulboundIdentityAndName(_msgSender(),name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#115-121)
                - tokenId = soulboundIdentity.mintIdentityWithName(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#225-230)
        External calls sending eth:
        - _pay(paymentMethod,getNameRegistrationPricePerYear(name).mul(yearsPeriod)) (contracts/SoulStore.sol#109-112)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        Event emitted after the call(s):
        - SoulboundIdentityAndNamePurchased(to,tokenId,name,yearsPeriod) (contracts/SoulStore.sol#232)
                - _mintSoulboundIdentityAndName(_msgSender(),name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#115-121)
Reentrancy in SoulStore.purchaseName(address,string,uint256,string,address) (contracts/SoulStore.sol#146-160):
        External calls:
        - _pay(paymentMethod,getNameRegistrationPricePerYear(name).mul(yearsPeriod)) (contracts/SoulStore.sol#153-156)
                - returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#110)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,amountInStableCoin) (contracts/dex/PaymentGateway.sol#194-198)
                - IERC20(paymentMethod).safeTransferFrom(msg.sender,reserveWallet,swapAmout_scope_0) (contracts/dex/PaymentGateway.sol#205-209)
        - _mintSoulName(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#159)
                - tokenId = soulName.mint(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#268)
        External calls sending eth:
        - _pay(paymentMethod,getNameRegistrationPricePerYear(name).mul(yearsPeriod)) (contracts/SoulStore.sol#153-156)
                - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
                - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
                - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
        Event emitted after the call(s):
        - SoulNamePurchased(to,tokenId,name,yearsPeriod) (contracts/SoulStore.sol#270)
                - _mintSoulName(to,name,yearsPeriod,_tokenURI) (contracts/SoulStore.sol#159)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

SoulLinker.addPermission(address,uint256,uint256,address,uint256,string,uint256,uint256,bytes) (contracts/SoulLinker.sol#148-209) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool,string)(expirationDate >= block.timestamp,VALID_PERIOD_EXPIRED) (contracts/SoulLinker.sol#166)
SoulLinker.validatePermission(uint256,uint256,address,uint256,uint256) (contracts/SoulLinker.sol#342-369) uses timestamp for comparisons
        Dangerous comparisons:
        - require(bool,string)(permission.expirationDate >= block.timestamp,VALID_PERIOD_EXPIRED) (contracts/SoulLinker.sol#362-365)
SoulName.renewYearsPeriod(uint256,uint256) (contracts/SoulName.sol#152-185) uses timestamp for comparisons
        Dangerous comparisons:
        - tokenData[tokenId].expirationDate < block.timestamp (contracts/SoulName.sol#170)
SoulName.isAvailable(string) (contracts/SoulName.sol#226-239) uses timestamp for comparisons
        Dangerous comparisons:
        - tokenData[tokenId].expirationDate < block.timestamp (contracts/SoulName.sol#235)
SoulName.getTokenData(string) (contracts/SoulName.sol#250-281) uses timestamp for comparisons
        Dangerous comparisons:
        - (_getName(_tokenData.name),_linked,_identityId,tokenId,_tokenData.expirationDate,_tokenData.expirationDate >= block.timestamp) (contracts/SoulName.sol#273-280)
SoulName.getSoulNames(address) (contracts/SoulName.sol#316-345) uses timestamp for comparisons
        Dangerous comparisons:
        - tokenData[tokenId].expirationDate >= block.timestamp (contracts/SoulName.sol#327)
        - tokenData[tokenId_scope_1].expirationDate >= block.timestamp (contracts/SoulName.sol#337)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#394-416) uses assembly
        - INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#408-410)
Address.verifyCallResult(bool,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#201-221) uses assembly
        - INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#213-216)
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#57-74) uses assembly
        - INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#65-69)
Utils.toSlice(string) (contracts/libraries/Utils.sol#33-39) uses assembly
        - INLINE ASM (contracts/libraries/Utils.sol#35-37)
Utils.startsWith(string,string) (contracts/libraries/Utils.sol#41-68) uses assembly
        - INLINE ASM (contracts/libraries/Utils.sol#58-66)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SoulLinker.revokePermission(uint256,uint256,address,uint256,uint256) (contracts/SoulLinker.sol#218-247) compares to a boolean constant:
        -require(bool,string)(_permissions[token][tokenId][readerIdentityId][signatureDate].isRevoked == false,PERMISSION_ALREADY_REVOKED) (contracts/SoulLinker.sol#230-234)
SoulLinker.validatePermission(uint256,uint256,address,uint256,uint256) (contracts/SoulLinker.sol#342-369) compares to a boolean constant:
        -require(bool,string)(permission.isRevoked == false,PERMISSION_REVOKED) (contracts/SoulLinker.sol#366)
SoulName._setTokenURI(uint256,string) (contracts/SoulName.sol#404-416) compares to a boolean constant:
        -require(bool,string)(_URIs[_tokenURI] == false,URI_ALREADY_EXISTS) (contracts/SoulName.sol#412)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

Different versions of Solidity are used:
        - Version used: ['^0.8.0', '^0.8.1', '^0.8.7']
        - ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
        - ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
        - ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#4)
        - ^0.8.7 (contracts/SoulLinker.sol#2)
        - ^0.8.7 (contracts/SoulName.sol#2)
        - ^0.8.7 (contracts/SoulStore.sol#2)
        - ^0.8.7 (contracts/Soulbound2FA.sol#2)
        - ^0.8.7 (contracts/SoulboundCreditScore.sol#2)
        - ^0.8.7 (contracts/SoulboundIdentity.sol#2)
        - ^0.8.7 (contracts/dex/PaymentGateway.sol#2)
        - ^0.8.7 (contracts/interfaces/ISoulName.sol#2)
        - ^0.8.7 (contracts/interfaces/ISoulboundIdentity.sol#2)
        - ^0.8.7 (contracts/interfaces/dex/IUniswapRouter.sol#2)
        - ^0.8.7 (contracts/libraries/Utils.sol#2)
        - ^0.8.7 (contracts/tokens/MASA.sol#2)
        - ^0.8.7 (contracts/tokens/MasaNFT.sol#2)
        - ^0.8.7 (contracts/tokens/MasaSBT.sol#2)
        - ^0.8.7 (contracts/tokens/MasaSBTAuthority.sol#2)
        - ^0.8.7 (contracts/tokens/MasaSBTSelfSovereign.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/ISBT.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/SBT.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/extensions/ISBTEnumerable.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/extensions/ISBTMetadata.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/extensions/SBTBurnable.sol#2)
        - ^0.8.7 (contracts/tokens/SBT/extensions/SBTEnumerable.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

PaymentGateway.removeErc20Token(address) (contracts/dex/PaymentGateway.sol#119-131) has costly operations inside a loop:
        - erc20tokens.pop() (contracts/dex/PaymentGateway.sol#127)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

SBT._baseURI() (contracts/tokens/SBT/SBT.sol#120-122) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol#4) allows old versions
Pragma version^0.8.7 (contracts/SoulLinker.sol#2) allows old versions
Pragma version^0.8.7 (contracts/SoulName.sol#2) allows old versions
Pragma version^0.8.7 (contracts/SoulStore.sol#2) allows old versions
Pragma version^0.8.7 (contracts/Soulbound2FA.sol#2) allows old versions
Pragma version^0.8.7 (contracts/SoulboundCreditScore.sol#2) allows old versions
Pragma version^0.8.7 (contracts/SoulboundIdentity.sol#2) allows old versions
Pragma version^0.8.7 (contracts/dex/PaymentGateway.sol#2) allows old versions
Pragma version^0.8.7 (contracts/interfaces/ISoulName.sol#2) allows old versions
Pragma version^0.8.7 (contracts/interfaces/ISoulboundIdentity.sol#2) allows old versions
Pragma version^0.8.7 (contracts/interfaces/dex/IUniswapRouter.sol#2) allows old versions
Pragma version^0.8.7 (contracts/libraries/Utils.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/MASA.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/MasaNFT.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/MasaSBT.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/MasaSBTAuthority.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/MasaSBTSelfSovereign.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/ISBT.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/SBT.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/extensions/ISBTEnumerable.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/extensions/ISBTMetadata.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/extensions/SBTBurnable.sol#2) allows old versions
Pragma version^0.8.7 (contracts/tokens/SBT/extensions/SBTEnumerable.sol#2) allows old versions
solc-0.8.7 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
        - (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-139):
        - (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#137)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#157-166):
        - (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#164)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#184-193):
        - (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#191)
Low level call in PaymentGateway._pay(address,uint256) (contracts/dex/PaymentGateway.sol#173-213):
        - (success) = address(reserveWallet).call{value: swapAmout}() (contracts/dex/PaymentGateway.sol#182-184)
        - (success,None) = address(msg.sender).call{value: refund}() (contracts/dex/PaymentGateway.sol#189)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol#59) is not in mixedCase
Variable EIP712._CACHED_DOMAIN_SEPARATOR (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#31) is not in mixedCase
Variable EIP712._CACHED_CHAIN_ID (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#32) is not in mixedCase
Variable EIP712._CACHED_THIS (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#33) is not in mixedCase
Variable EIP712._HASHED_NAME (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#35) is not in mixedCase
Variable EIP712._HASHED_VERSION (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#36) is not in mixedCase
Variable EIP712._TYPE_HASH (node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol#37) is not in mixedCase
Parameter SoulLinker.setSoulboundIdentity(ISoulboundIdentity)._soulboundIdentity (contracts/SoulLinker.sol#69) is not in mixedCase
Parameter SoulLinker.setAddPermissionPrice(uint256)._addPermissionPrice (contracts/SoulLinker.sol#102) is not in mixedCase
Parameter SoulLinker.setAddPermissionPriceMASA(uint256)._addPermissionPriceMASA (contracts/SoulLinker.sol#113) is not in mixedCase
Parameter SoulName.setSoulboundIdentity(ISoulboundIdentity)._soulboundIdentity (contracts/SoulName.sol#73) is not in mixedCase
Parameter SoulName.setExtension(string)._extension (contracts/SoulName.sol#85) is not in mixedCase
Parameter SoulName.setContractURI(string)._contractURI (contracts/SoulName.sol#97) is not in mixedCase
Parameter SoulName.mint(address,string,uint256,string)._tokenURI (contracts/SoulName.sol#118) is not in mixedCase
Variable SoulName._URIs (contracts/SoulName.sol#32) is not in mixedCase
Parameter SoulStore.setSoulboundIdentity(ISoulboundIdentity)._soulboundIdentity (contracts/SoulStore.sol#53) is not in mixedCase
Parameter SoulStore.setNameRegistrationPricePerYear(uint256,uint256)._nameLength (contracts/SoulStore.sol#68) is not in mixedCase
Parameter SoulStore.setNameRegistrationPricePerYear(uint256,uint256)._nameRegistrationPricePerYear (contracts/SoulStore.sol#69) is not in mixedCase
Parameter SoulStore.purchaseIdentityAndName(address,string,uint256,string)._tokenURI (contracts/SoulStore.sol#107) is not in mixedCase
Parameter SoulStore.purchaseName(address,string,uint256,string,address)._tokenURI (contracts/SoulStore.sol#150) is not in mixedCase
Parameter SoulboundIdentity.setSoulName(ISoulName)._soulName (contracts/SoulboundIdentity.sol#34) is not in mixedCase
Parameter SoulboundIdentity.mintIdentityWithName(address,string,uint256,string)._tokenURI (contracts/SoulboundIdentity.sol#65) is not in mixedCase
Parameter PaymentGateway.setSwapRouter(address)._swapRouter (contracts/dex/PaymentGateway.sol#69) is not in mixedCase
Parameter PaymentGateway.setWrappedNativeToken(address)._wrappedNativeToken (contracts/dex/PaymentGateway.sol#78) is not in mixedCase
Parameter PaymentGateway.setStableCoin(address)._stableCoin (contracts/dex/PaymentGateway.sol#90) is not in mixedCase
Parameter PaymentGateway.setMasaToken(address)._masaToken (contracts/dex/PaymentGateway.sol#100) is not in mixedCase
Parameter PaymentGateway.addErc20Token(address)._erc20token (contracts/dex/PaymentGateway.sol#108) is not in mixedCase
Parameter PaymentGateway.removeErc20Token(address)._erc20token (contracts/dex/PaymentGateway.sol#119) is not in mixedCase
Parameter PaymentGateway.setReserveWallet(address)._reserveWallet (contracts/dex/PaymentGateway.sol#136) is not in mixedCase
Struct Utils.slice (contracts/libraries/Utils.sol#8-11) is not in CapWords
Parameter Utils.toLowerCase(string)._str (contracts/libraries/Utils.sol#13) is not in mixedCase
Parameter MasaSBTSelfSovereign.setSoulboundIdentity(ISoulboundIdentity)._soulboundIdentity (contracts/tokens/MasaSBTSelfSovereign.sol#66) is not in mixedCase
Parameter MasaSBTSelfSovereign.setMintingPrice(uint256)._mintingPrice (contracts/tokens/MasaSBTSelfSovereign.sol#78) is not in mixedCase
Parameter MasaSBTSelfSovereign.addAuthority(address)._authority (contracts/tokens/MasaSBTSelfSovereign.sol#89) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable PaymentGateway.removeErc20Token(address)._erc20token (contracts/dex/PaymentGateway.sol#119) is too similar to PaymentGateway.erc20tokens (contracts/dex/PaymentGateway.sol#38)
Variable PaymentGateway.addErc20Token(address)._erc20token (contracts/dex/PaymentGateway.sol#108) is too similar to PaymentGateway.erc20tokens (contracts/dex/PaymentGateway.sol#38)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

MASA.constructor() (contracts/tokens/MASA.sol#7-9) uses literals with too many digits:
        - _mint(msg.sender,1000000e18) (contracts/tokens/MASA.sol#8)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
. analyzed (48 contracts with 81 detectors), 167 result(s) found
 